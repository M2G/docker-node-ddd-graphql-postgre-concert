schema {
  query: Query
  mutation: Mutation
}

input CreateUserInput {
  email: String!
  password: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  deleteUser(id: String!): User
  forgotPassword(email: String!): Status!
  resetPassword(input: ResetPasswordInput!): Status!
  signin(input: SigninInput): String!
  signup(input: SignupInput): User!
  updateUser(id: String!, input: UpdateUserInput): User
}

type PageInfo {
  count: Int
  next: Int
  pages: Int
  prev: Int
}

type Query {
  getUser(id: String!): User
  users(filters: String, page: Int, pageSize: Int): [Users!]
}

input ResetPasswordInput {
  password: String!
  token: String!
}

input SigninInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  password: String!
}

type Status {
  success: Boolean
}

input UpdateUserInput {
  email: String
  first_name: String
  last_name: String
  username: String
}

type User {
  _id: String
  created_at: Int
  deleted_at: Int
  email: String
  first_name: String
  last_connected_at: Int
  last_name: String
  modified_at: Int
  password: String
  reset_password_expires: String
  reset_password_token: String
  username: String
}

type Users {
  pageInfo: PageInfo
  results: [User]
}

enum sortOrder {
  ASC
  DESC
}